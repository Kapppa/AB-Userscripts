from datetime import datetime, timezone
from collections import defaultdict
import itertools
import os

KEYS = {'@require', '@grant'}

def userscript_header(lines):
    # header is None before header, True during and False after.
    header = None
    for l in lines:
        if header is None and '==UserScript==' in l:
            header = True
            yield l
        elif header is True and '==/UserScript==' in l:
            header = False
            yield l
        elif header is True:
            yield l
        else:
            return

def try_parse_option(line):
    l = line.split()
    if len(l) < 3: return (None, None)
    slashes, key, value, *rest = l
    if slashes != '//' or key not in KEYS: return (None, None)
    if rest: raise ValueError("Invalid userscript @" + key + " line: " + l)
    return key, value


def parse_header(header):
    data = defaultdict(list)
    for l in header:
        k, v = try_parse_option(l)
        if k:
            data[k].append(v)
    return data

def replace_header(lines, data):
    ignore = None
    for l in lines:
        k, v = try_parse_option(l)
        if k not in data:
            yield l
            continue
        if k == ignore:
            continue
        index = l.index(v)
        left = ('// ' + k).ljust(index)
        for val in data[k]:
            yield left + val + '\n'
        ignore = k


if __name__ == '__main__':
    data = defaultdict(list)
    HEADER = '_header.js'
    SRC = './src'
    scripts = []
    for name in os.listdir(SRC):
        f = os.path.join(SRC, name)
        if not f.lower().endswith('.user.js'): continue
        if not os.path.isfile(f): continue

        scripts.append(SRC + '/' + name)

        with open(f) as fo:
            for k, vs in parse_header(userscript_header(fo)).items():
                data[k].extend(x for x in vs if x not in data[k])

    with open(HEADER) as fo:
        new_lines = list(replace_header(fo, data))
    with open(HEADER, 'w') as fo:
        fo.writelines(new_lines)

    # just concatenate all the files here ;-;
    dist_file = 'dist/ab_delicious_scripts.user.js'
    with open(dist_file, 'wb') as f:
        for part in [HEADER] + scripts:
            with open(part, 'rb') as f2:
                f.writelines(f2.readlines())
            f.write(b'\n')
        f.write(b'// Compiled ' + datetime.now(timezone.utc).isoformat().encode('utf-8') + b'.')

    # make_ref = lambda s: '/// <reference path="' + s + '"/>'

    # template_lines = []
    # write = lambda x: template_lines.append(x + '\n')
    # write_lines = lambda l: write('\n'.join(l))

    # write_lines([
    #     '// This file is automatically generated and any changes will be overwritten.',
    #     "// Please do not manually edit this file.",
    #     '// Template last modified ' + datetime.now(timezone.utc).isoformat() + '.'
    # ])
    # write('')
    # write_lines(make_ref(s) for s in [HEADER] + scripts)

    # with open('_template.ts', 'w') as fo:
    #     fo.writelines(template_lines)
